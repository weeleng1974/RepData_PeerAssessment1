library(devtools)
find_rtools
find_rtools()
library(Kernsmooth)
library(KernSmooth)
library(swirl)
swirl()
install_from_swirl("Open Intro")
swirl()
swirl()
y<-100
cars$type
sqrt(y)
z<-sqrt(y)
?sqrt
cars
10
range(cars$price)
sum(cars$price)
sum(cars$price)/54
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
mpg.sorted<-sort(mpg.midsize)
19
median(mpg.midsize)
summary(mpg.midsize)
summary(cars$mpgCity)
nxt()
25
nxt()
1
19
nxt()
26
25
24
23
27
28
29
30
19
nxt()
sd(mpg.midsize)
sd(mpg.midsize)^2
24
clear()
clear
?cle
?clr
help(clear)
help(cl)
swirl()
5  + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_duv <- z/my_sqrt
my_duv <- z\my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 100
z * 2 + 1000
my_div
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(0.5,55,-10,6)
tf <- num_vect<1
tf
num>=6
num_vect>=6
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse =" ")
my_name <- c(my_char, "wee leng")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep= " ")
paste(c(1:3), c("X","Y","Z"))
paste(c(1:3), c("X","Y","Z"), sep=" ")
paste(1:3, c("X","Y","Z"), sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x<-c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z<-rep(NA, 1000)
my_data<-sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf-Inf
x
c[1:10]
x[1:10]
x[is.na(x)]
y<-x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
c(foo=11, bar=2, narf=NA)
c(foo=11, bar=2, norf=NA)
vect <-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vects) <- c("foo, "bar", "norf"")
names(vects) <- c("foo, "bar", "norf")
names(vects) <- c("foo", "bar", "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
?runif
library(datasets)
data(iris)
?iris
iris
virginica<-iris[species=="virginica",]
virginica<-iris[Species=="virginica",]
virginica<-iris[,Species=="virginica"]
virginica<-iris[Species=='virginica']
virginica<-iris[Species=='virginica',]
virginica<-iris[,Species=='virginica']
virginica<-iris[,iris$Species=='virginica']
virginica<-iris[iris$Species=='virginica',]
virginica
mean(virginica$Sepal.Length)
apply(iris,1,mean)
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
sapply(mtcars,cyl,mean)
split(mtcars,mtcars$cyl)
tapply(mtcars$mpg, mtcars$hp,mean)
tapply(mtcars$hp, mtcars$cyl,mean)
aaa<-tapply(mtcars$hp, mtcars$cyl,mean)
aaa[8]
aaa[3]
aaa[3] - aaa[1]
debug(ls)
ls
ls(x-y)
?solve
a<-matrix(1:4,2)
a
b<-solve(a)
b
a %*% b
source('~/Coursera/courses/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
a<-makeCacheMatrix(matrix(1:4,2))
a&get()
a$get()
a$getInverse()
cacheSolve(a)
a$getInverse()
cacheSolve(a)
source('~/Coursera/courses/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
library//9rjava
library(rjava)
library(xlsx)
?mean
?median
library(xtable)
data.aggregate<- aggregate(data$steps, FUN=sum, by=list(date=data$date))
summary(data.aggregate)
plot(data.aggregate$date,data.aggregate$x,type="h", main="Total number of steps taken each day", xlab = "Date", ylab="Total Number Of Steps")
data.mean<- aggregate(data$steps, FUN=mean, by=list(date=data$date))
colnames(data.mean)<-c("Date","Mean.Steps")
setwd("~/Coursera/courses/05_ReproducibleResearch/Assignment 01/RepData_PeerAssessment1")
data<-read.csv("activity.csv",header=TRUE, colClasses=c("integer","Date","integer"))
summary(data)
library(xtable)
data.aggregate<- aggregate(data$steps, FUN=sum, by=list(date=data$date))
summary(data.aggregate)
plot(data.aggregate$date,data.aggregate$x,type="h", main="Total number of steps taken each day", xlab = "Date", ylab="Total Number Of Steps")
data.mean<- aggregate(data$steps, FUN=mean, by=list(date=data$date))
colnames(data.mean)<-c("Date","Mean.Steps")
data.mean
data.mean$Mean.Steps
mean(data.mean$Mean.Steps)
mean(data.mean$Mean.Steps, rm=TRUE)
?mean
mean(data.mean$Mean.Steps, na.rm=TRUE)
median(data.mean$Mean.Steps, na.rm=TRUE)
View(data)
data.aggregateByInterval<- aggregate(data$steps, FUN="mean", by=list(data$interval))
summary(data.aggregateByInterval)
?aggreagate
?aggregate
xxx<-aggregate(data$steps, FUN=mean, by=list(date=data$date))
xxx
xxx<-aggregate(data$steps, FUN=mean, by=list(date=data$interval))
xxx
xxx<-aggregate(data$steps, FUN=mean, by=list(date=data$interval), na.action=na.omit)
xxx
data$interval
list(data$interval)
xxx<-aggregate(data$steps, FUN="mean", by=list(date=data$interval), na.action=na.omit)
xxx
xxx<-aggregate(data$steps, FUN="mean", by=list(date=data$interval))
xxx
xxx<-aggregate(data$steps, FUN=mean, by=list(interval=data$interval))
xxx
xxx<-aggregate(data$steps, FUN=mean, by=list(Interval=data$interval))
xxx
data$steps
mean(data@steps)
mean(data$steps)
mean(data$steps, rm.na=T)
mean(data$steps, rm.na=True)
mean(data$steps, na.rm=True)
mean(data$steps, na.rm=T)
xxx<-aggregate(data$steps, FUN=mean, by=list(Interval=data$interval), na.rm=TRUE)
xxx
data.aggregateByInterval<- aggregate(data$steps, FUN=mean, by=list(Interval = data$interval), na.rm=TRUE)
summary(data.aggregateByInterval)
nrow(na.omit(data))
nrow(!na.omit(data))
nrow(-na.omit(data))
?na.omit
summary(data)
sum(complete.cases(data))
?complete.cases
sum(!complete.cases(data))
data.aggregateByInterval
?select
xxx<-data[is.na(data$steps),]
xxx
nrow(xxx)
data1<-read.csv("activity.csv",header=TRUE, colClasses=c("integer","Date","integer"))
xxx<-data1[is.na(data1$steps),]
xxx[data1$steps,] <-1
xxx[1,] <-1
xxx[1,]
xxx[,xxx$steps]
xxx[,1]
xxx[,1]=<-11
xxx[,1]<-11
data1
summary(data1)
summary(xxx)
data.aggregate
?merge
data.na<-data[is.na(data$steps),]
data.na
summary(data.na)
data.merge<-merge(data.na, data.aggregateByInterval, by.x="interval", by.y="Interval")
head(data.merge)
data.nona<-data[!is.na(data$steps),]
summary(data.nona)
nrow(data.nona)
head(data.na)
?rbind
data.na<-data.na[,c(2:4)]
data.na[,2]
data.na[,3]
data.na[,4]
data.na[,c(2:3)]
data.na<-data[is.na(data$steps),]
data.na<-data[,c(2:3)]
data.nona<-data[!is.na(data$steps),]
data.merge<-merge(data.na, data.aggregateByInterval, by.x="interval", by.y="Interval")
head(data.merge)
data.merge<-data.merge[c(3,1,2)]
data.merge
str(data.merge)
data.na<-data[is.na(data$steps),]
data.na<-data[,c(2:3)]
data.nona<-data[!is.na(data$steps),]
data.merge<-merge(data.na, data.aggregateByInterval, by.x="interval", by.y="Interval")
str(data.na)
data.na<-data[is.na(data$steps),]
str(data.na)
data.na<-data[is.na(data$steps),]
data.na<-data.na[,c(2:3)]
data.nona<-data[!is.na(data$steps),]
data.merge<-merge(data.na, data.aggregateByInterval, by.x="interval", by.y="Interval")
data.merge<-data.merge[c(3,1,2)]
str(data.merge)
rbind(data.nona,data.merge)
data.na<-data[is.na(data$steps),]
data.na<-data.na[,c(2:3)]
data.nona<-data[!is.na(data$steps),]
data.merge<-merge(data.na, data.aggregateByInterval, by.x="interval", by.y="Interval")
data.merge<-data.merge[c(3,1,2)]
colnames(data.merge)<-c("steps","date","interval")
rbind(data.nona,data.merge)
rbind?
?rbind
data.na<-data[is.na(data$steps),]
data.na<-data.na[,c(2:3)]
data.nona<-data[!is.na(data$steps),]
data.merge<-merge(data.na, data.aggregateByInterval, by.x="interval", by.y="Interval")
data.merge<-data.merge[c(3,1,2)]
colnames(data.merge)<-c("steps","date","interval")
data.new<-rbind(data.nona,data.merge)
str(data.na)
str(data.nona)
str(data.merge)
data.na<-data[is.na(data$steps),]
data.na<-data.na[,c(2:3)]
data.nona<-data[!is.na(data$steps),]
data.merge<-merge(data.na, data.aggregateByInterval, by.x="interval", by.y="Interval")
data.merge<-data.merge[c(3,2,1)]
colnames(data.merge)<-c("steps","date","interval")
data.new<-rbind(data.nona,data.merge)
str(data.new)
summary(data.new)
?which.max
data.aggregateByInterval<- aggregate(data$steps, FUN=mean, by=list(Interval = data$interval), na.rm=TRUE)
which.max(data.aggregateByInterval$x)
data.aggregateByInterval(104)
data.aggregateByInterval[104,]
data.aggregateByInterval[104,interval]
data.aggregateByInterval[104,Interval]
data.aggregateByInterval[104,2]
data.aggregateByInterval[104,1]
data.aggregateByInterval[which.max(data.aggregateByInterval$x),1]
data.new
str(data.new)
?weekdays
weekdays(data.new$date)
data.date<-weekdays(data.new$date)
data.date
str(data.date)
?cbind()
cbind(data.new,data.date)
test.date <- ifelse(test$day %in% c("Saturday", "Sunday"), "weekend", "weekday")
str(data.new)
str(date.date)
str(data.date)
test.date <- ifelse(data.date) %in% c("Saturday", "Sunday"), "weekend", "weekday")
class(data.date)
data.date<-weekdays(data.new$date)
data.new<-cbind(data.new,data.date)
str(data.new)
test$wkTm <- ifelse(data.new$data.date %in% c("Saturday", "Sunday"), "weekend", "weekday")
xxx <- ifelse(data.new$data.date %in% c("Saturday", "Sunday"), "weekend", "weekday")
str(xxx)
data.date<-weekdays(data.new$date)
data.new<-cbind(data.new,data.date)
data.date<- ifelse(data.new$data.date %in% c("Saturday", "Sunday"), "weekend", "weekday")
data.new<-cbind(data.new,data.date)
head(data.new)
data.new
str(data.new)
data.new<-data.new[,c(1.2.3.6)]
data.new<-data.new[,c(1,2,3,6)]
data.new
str(data.new)
colnames(data.new)<-c("steps","date","interval","weekdayOrEnd")
str(data.new)
data.aggregateByInterval<- aggregate(data.new$steps, FUN=mean, by=list(Interval = data.new$interval, WeekdayOrEnd = data.new$weekdayOrEnd), na.rm=TRUE)
str(data.aggregateByInterval)
?plot
data.date<-weekdays(data.new$date)
data.new<-cbind(data.new,data.date)
data.date<- ifelse(data.new$data.date %in% c("Saturday", "Sunday"), "weekend", "weekday")
data.new<-cbind(data.new,data.date)
str(data.new)
data.na<-data[is.na(data$steps),]
data.na<-data.na[,c(2:3)]
data.nona<-data[!is.na(data$steps),]
data.merge<-merge(data.na, data.aggregateByInterval, by.x="interval", by.y="Interval")
data.merge<-data.merge[c(3,2,1)]
colnames(data.merge)<-c("steps","date","interval")
data.new<-rbind(data.nona,data.merge)
data.newaggregate<- aggregate(data.new$steps, FUN=sum, by=list(date=data.new$date))
plot(data.newaggregate$date,data.newaggregate$x,type="h", main="Total number of steps taken each day", xlab = "Date", ylab="Total Number Of Steps")
data.new
data.na<-data[is.na(data$steps),]
data.na<-data.na[,c(2:3)]
data.nona<-data[!is.na(data$steps),]
data.merge<-merge(data.na, data.aggregateByInterval, by.x="interval", by.y="Interval")
data.merge<-data.merge[c(3,2,1)]
colnames(data.merge)<-c("steps","date","interval")
data.new<-rbind(data.nona,data.merge)
data.newaggregate<- aggregate(data.new$steps, FUN=sum, by=list(date=data.new$date))
plot(data.newaggregate$date,data.newaggregate$x,type="h", main="Total number of steps taken each day", xlab = "Date", ylab="Total Number Of Steps")
?par
